 "[{"text":[["Обработчики промисов .then/.catch/.finally всегда асинхронны.",
 "Даже когда промис сразу же выполнен, код в строках ниже .then/.catch/.finally будет запущен до этих обработчиков."
 ,"Вот демо:"],[{"image":""}]],"code":["let promise = Promise.resolve();","promise.then(() => alert(\"промис выполнен\"));","alert(\"код выполнен\"); // этот alert показывается первым"]},{"text":[[],[{"h1":["Очередь микрозадач"]}],["Kогда промис выполнен, его обработчики .then/catch/finally попадают в очередь. Они пока не выполняются. Движок JavaScript берёт задачу из очереди и выполняет её, когда он освободится от выполнения текущего кода.","Обработчики промисов всегда проходят через эту внутреннюю очередь."],[{"h1":["Необработанные ошибки"]}],["\"Необработанная ошибка\" возникает в случае, если ошибка промиса не обрабатывается в конце очереди микрозадач.","Обычно, если мы ожидаем ошибку, мы добавляем .catch в конец цепочки промисов, чтобы обработать её:"],[{"image":""}]],"code":["let promise = Promise.reject(new Error(\"Ошибка в промисе!\"));","promise.catch(err => alert('поймана!'));","// не запустится, ошибка обработана","window.addEventListener('unhandledrejection', event => {","  alert(event.reason);","});"]}]"
users_id: null